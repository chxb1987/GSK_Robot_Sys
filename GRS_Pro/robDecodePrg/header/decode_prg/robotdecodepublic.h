#ifndef ROBOTDECODEPUBLIC_H
#define ROBOTDECODEPUBLIC_H
#include "decode_lexical_analysis.h"
#include "basic_data_type.h"
#include "decode_datatype.h"
#include "decode_instructions.h"
#include "decode_typestructs.h"

#if defined(__cplusplus)
extern "C"
{
#endif

#define MAX_CHANNEL 8  //最大8通道

int createOneCharacterIndex(decode_character_property charPro);
int getOneCharacterIndex(int pos, char *str, decode_character_property *charPro);//根据序号依次取相同名称的匹配
int deleteOneCharacterIndex(decode_character_property charPro);//删除一个查询表记录

typedef struct {//例行程序属性
    char routineName[32];//例行程序名
    int routineType;//例行程序类型procedure function trap
    int routineFlag;//标志位，参看ABB用来标记，从低字节开始local backward error undo
    int parentModule;//所属模块索引
    char parameter[256];//参数字符串
}routine_prg_property;

typedef struct {//模块属性结构体
    char moduleName[32];//模块名，ABB允许的最长长度
    int moduleType;//模块类型，系统或者程序，0为程序，1为系统
}module_prg_property;


typedef struct {//程序指针存储结构
    int curModule;  //当前所在的模块
    int curModuleLine;  //当前所在模块的行
    int curRoutine; //当前所在的例行程序
    int curRoutineLine;//当前所在的例行程序的行
}program_pointer;

/***************************************************************************/
/*以下开始函数声明*/
/***************************************************************************/
/*函数功能：译码模块初始化，在译码接口调用之前务必初始化好*/
/*输入参数： 无*/
/*输出参数: 	  无*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int decodeTaskInit(void);
/***************************************************************************/

/***************************************************************************/
/*函数功能：加载机器人程序文件，以*.pgf后缀*/
/*输入参数：
channel:通道号
filePathName:完整路径名+文件名
*/
/*输出参数: 	  无*/
/*返回值：	  true:成功，false:失败*/
/***************************************************************************/
BOOLEAN readRobotPrgFile(int channel, const char *filePathName);
/***************************************************************************/

/***************************************************************************/
/*函数功能：保存机器人程序文件，*/
/*输入参数：
channel:通道号
filePathName:完整路径名+文件名
*/
/*输出参数: 无*/
/*返回值：	  true:成功，flse：失败*/
/***************************************************************************/
BOOLEAN writeRobotPrgFile(int channel, const char *filePathName);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取模块指定行号的字符串，从0开始计算*/
/*输入参数：
channel:通道号
selMod:所选择的模块号
lineNum:模块行号，从0开始计算
*/
/*输出参数:
str:获取的字符串数据，要保证缓冲足够
*/
/*返回值：	  >0：成功，-1：失败*/
/***************************************************************************/
int getSelectModuleLineStr(int channel, int selMod, int lineNum, char *str);
/***************************************************************************/

/***************************************************************************/
/*函数功能：新建一个模块*/
/*输入参数：
channel:通道号
modPrgPro:模块属性结构体
*/
/*输出参数: 	  无*/
/*返回值：	  true:成功，false：失败*/
/***************************************************************************/
BOOLEAN createNewModule(int channel, module_prg_property modPrgPro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：在一个模块中新建一个例行程序*/
/*输入参数：
channel:通道号
modNum:模块号
routinePrgPro:例行程序属性结构体
*/
/*输出参数: 	  无*/
/*返回值：	  true：成功，false：失败*/
/***************************************************************************/
BOOLEAN createNewRoutine(int channel, int modNum, routine_prg_property routinePrgPro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：在模块中插入新行*/
/*输入参数：
channel:通道号
modNum:模块号
lineNum:模块行号，从0开始计算，默认是在lineNum之前插入，若lineNum+1，则在lineNum之后加入
str:要插入的字符串
*/
/*输出参数: 	  无*/
/*返回值：	  true：成功，false：失败*/
/***************************************************************************/
BOOLEAN insertNewLineStr(int channel, int modNum, int lineNum, const char *str);
/***************************************************************************/

/***************************************************************************/
/*函数功能：根据模块名获取索引下标*/
/*输入参数：
channel:通道号
modName:模块名称
*/
/*输出参数: 	  无*/
/*返回值：	  下标值，从0开始计算*/
/***************************************************************************/
int getModulePos(int channel, char *modName);
/***************************************************************************/

/***************************************************************************/
/*函数功能：根据名称获取模块中例行程序的索引下标*/
/*输入参数：
channel:通道号
modNum:指定的模块下标
routineName:例行程序名称
*/
/*输出参数: 	  无*/
/*返回值：	  下标值，从0开始计算*/
/***************************************************************************/
int getRoutinePos(int channel, int modNum, char *routineName);
/***************************************************************************/

/***************************************************************************/
/*函数功能：新建一个变量*/
/*输入参数：
channel:通道号
modNum:指定的模块下标
routineNum:指定的例行程序下标，若无需例行程序，传递-1
str:变量字符串，与ABB变量字符串一致
*/
/*输出参数: 	  无*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int createNewVariable(int channel, int modNum, int routineNum, char *str);
/***************************************************************************/

/***************************************************************************/
/*函数功能：删除指定行字符串*/
/*输入参数：
channel:通道号
modNum:指定的模块下标
lineNum:模块行号，从0开始计
*/
/*输出参数: 	  无*/
/*返回值：	  true：成功，false：失败*/
/***************************************************************************/
BOOLEAN deleteOneLineStr(int channel, int modNum, int lineNum);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取文件中模块数目*/
/*输入参数：
channel:通道号
*/
/*输出参数: 	  无*/
/*返回值：	  模块总数*/
/***************************************************************************/
int getFileModuleCnt(int channel);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取模块中例行程序数目*/
/*输入参数：
channel:通道号
modNum:模块号
*/
/*输出参数: 	  无*/
/*返回值：	  例行程序数目*/
/***************************************************************************/
int getSelModRoutineCnt(int channel, int modNum);
/***************************************************************************/

/***************************************************************************/
/*函数功能：修改一行字符串*/
/*输入参数：
channel:通道号
modNum:指定模块号
lineNum:模块行号
str:新修改的字符串
*/
/*输出参数: 	  无*/
/*返回值：	  true：成功，false：失败*/
/***************************************************************************/
BOOLEAN modifyOneLineStr(int channel, int modNum, int lineNum, const char *str);
/***************************************************************************/

/***************************************************************************/
/*函数功能：修改变量*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum:例行程序号，若不需指定例行程序，则传递-1
varName:变量名
str:新的变量字符串，与ABB的格式一致
*/
/*输出参数: 	  无*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int modifyOneVariable(int channel, int modNum, int routineNum, char *varName, char *str);
/***************************************************************************/

/***************************************************************************/
/*函数功能：删除一个变量*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum：例行程序，若不需要例行程序，则传递-1
varName:变量名
*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int deleteOneVariable(int channel, int modNum, int routineNum, char *varName);
/***************************************************************************/

/***************************************************************************/
/*函数功能：使用下标索引变量属性*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum:例行程序号，不需要则传递-1
pos:变量下标索引，从0开始
varType:变量类型，decode_datatype.h中的decode_typestruct中的枚举类型
*/
/*输出参数:
pro:获取的变量属性
*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int usePosGetSelVarProperty(int channel, int modNum, int routineNum, int pos, int varType, decode_type_property *pro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：使用变量索引下标获取变量值*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum:例行程序号，不需要则传递-1
pos:变量下标索引号
varType:变量类型
*/
/*输出参数:
dataVal:获取的变量数据
*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int usePosGetSelVarVal(int channel, int modNum, int routineNum, int pos, int varType, decode_type_data *dataVal);
/***************************************************************************/

/***************************************************************************/
/*函数功能：根据名称获取变量属性*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum:例行程序号，不需要则传递-1
*/
/*输出参数:
pro:变量属性
*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int useNameGetSelVarProperty(int channel, int modNum, int routineNum, char *varName, decode_type_property *pro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：删除模块中的一个例行程序*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum:例行程序号
*/
/*输出参数: 	  无*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int deleteSelRoutine(int channel, int modNum, int routineNum);
/***************************************************************************/

/***************************************************************************/
/*函数功能：删除一个模块*/
/*输入参数：
channel:通道号
modNum:模块号
*/
/*输出参数: 	  无*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int deleteSelModule(int channel, int modNum);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取选择模块属性*/
/*输入参数：
channel:通道号
modNum:模块号
*/
/*输出参数:
modPro:模块属性
*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int getSelModuleProperty(int channel, int modNum, module_prg_property *modPro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：修改模块属性*/
/*输入参数：
channel:通道号
modNum:模块号
modPro:模块属性值
*/
/*输出参数: 	  无*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int modifySelModuleProperty(int channel, int modNum, module_prg_property modPro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取例行程序属性*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum:例行程序号，不需要则传递-1
*/
/*输出参数:
routinePro:例行程序属性
*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int getSelRoutineProperty(int channel, int modNum, int routineNum, routine_prg_property *routinePro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：修改例行程序属性*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum:例行程序号，不需要则传递-1
routinePro:例行程序属性
*/
/*输出参数: 	  无*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int modifySelRoutineProperty(int channel, int modNum, int routineNum, routine_prg_property routinePro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：判断模块行是否可选*/
/*输入参数：
modNum:模块号
lineNum:模块行号，从0开始计
*/
/*输出参数: 	  无*/
/*返回值：	  1：可选，-1：不可选*/
/***************************************************************************/
int isCanSelLineStr(int modNum, int lineNum);
/***************************************************************************/

/***************************************************************************/
/*函数功能：判断模块行是否可编辑*/
/*输入参数：
channel:通道号
modNum:模块号
lineNum:模块行号，从0开始计
*/
/*输出参数: 	  无*/
/*返回值：	  1：可选，-1：不可选*/
/***************************************************************************/
int isCanEditLineStr(int channel, int modNum, int lineNum);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取例行程序在模块中的首行行号*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum:例行程序号
*/
/*输出参数: 	  无*/
/*返回值：	  >=0：实际行号，-1：失败*/
/***************************************************************************/
int getSelRoutineFirstLinePos(int channel, int modNum, int routineNum);
/***************************************************************************/

/***************************************************************************/
/*函数功能：将变量值转换成字符串*/
/*输入参数：
type:变量类型，decode_datatype.h中的decode_typestruct中的枚举类型
varVal:变量的值

*/
/*输出参数:
str:转换后的字符串
*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int transVarValueToStr(int type, char *str, decode_type_data *varVal);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取文件程序总行数*/
/*输入参数：
channel：通道号
*/
/*输出参数: 	  无*/
/*返回值：	  总行数*/
/***************************************************************************/
int getFileLineTotalCnt(int channel);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取指定模块总行数*/
/*输入参数：
channel：通道号
modNum：模块号
*/
/*输出参数: 	  无*/
/*返回值：	  模块程序总行数*/
/***************************************************************************/
int getSelModuleFileLineTotalCnt(int channel, int modNum);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取模块中指定例行程序总行数*/
/*输入参数：
channel：通道号
modNum: 模块号
routineNum：例行程序号
*/
/*输出参数: 	  无*/
/*返回值：	  例行程序内总行数*/
/***************************************************************************/
int getSelRoutineFileLineTotalCnt(int channel, int modNum, int routineNum);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取指令信息结构体，用于显示*/
/*输入参数：
instrType：指令类型，在decode_instruction_enum枚举类型范围内
*/
/*输出参数: 	  无*/
/*返回值：	  NULL：获取失败，否则返回指向指令信息结构体*/
/***************************************************************************/
decode_instruction_info *decodeGetInstructionInfo(int instrType);
/***************************************************************************/

/***************************************************************************/
/*函数功能：获取指定变量类型的信息结构体，用于显示*/
/*输入参数：
varType：变量类型
*/
/*输出参数: 	  无*/
/*返回值：	  NULL：获取失败，否则返回执行变量类型信息结构体*/
/***************************************************************************/
decode_typestruct_info *decodeGetVarTypeInfo(int varType);
/***************************************************************************/

/***************************************************************************/
/*函数功能：使用变量名获取变量值*/
/*输入参数：
channel:通道号
modNum:模块号
routineNum:例行程序号，不用时传递-1
varName:变量名
dataVal:变量值
*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/
int useNameGetSelVarData(int channel, int modNum, int routineNum, char *varName, decode_type_data *dataVal);
/***************************************************************************/

/***************************************************************************/
/*函数功能：根据名称获取模块属性*/
/*输入参数：
modName:模块名
*/
/*输出参数:
modPro:模块属性
*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int useNameGetModuleProperty(int channel, char *modName, module_prg_property *modPro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：根据名称获取例行程序属性*/
/*输入参数：
routineName:例行程序名
*/
/*输出参数:
routinePro:例行程序属性
*/
/*返回值：	  1：成功，-1：失败*/
/***************************************************************************/
int useNameGetRoutineProperty(int channel, char *routineName, routine_prg_property *routinePro);
/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

/***************************************************************************/
/*函数功能：若该函数有特定客户，请注明*/
/*输入参数： 参数1：注明输入参数意义及有效性范围*/
/*输出参数: 	  参数1：注明输出参数意义及有效性范围*/
/*返回值：	  返回值范围及意义*/
/***************************************************************************/

/***************************************************************************/

#if defined(__cplusplus)
}
#endif

#endif // ROBOTDECODEPUBLIC_H

